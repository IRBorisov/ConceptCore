// MathLexerImpl.hpp generated by reflex 4.4.0 from MathLexerImpl.l

#define REFLEX_VERSION "4.4.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_fast
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_nodefault
#undef REFLEX_OPTION_noindent
#undef REFLEX_OPTION_noline
#undef REFLEX_OPTION_noyywrap
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_tabs
#undef REFLEX_OPTION_token_type
#undef REFLEX_OPTION_unicode

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               MathLexerImpl
#define REFLEX_OPTION_namespace           ccl::rslang::detail::rslex
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_noindent            true
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "MathLexerImpl.hpp"
#define REFLEX_OPTION_tabs                1
#define REFLEX_OPTION_token_type          ccl::rslang::TokenID
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////



#pragma once
#include "ccl/rslang/RSToken.h"



////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define WITH_NO_INDENT
#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ccl {
namespace rslang {
namespace detail {
namespace rslex {

class MathLexerImpl : public reflex::AbstractLexer<reflex::Matcher> {

public:
  StrPos lineBase{ 0 };

  [[nodiscard]] StrRange Range() const {
    return StrRange{
        static_cast<StrPos>(lineBase + columno()),
        static_cast<StrPos>(lineBase + columno() + columns())
    };
  }


 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  MathLexerImpl(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, std::cout by default
      std::ostream& os = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  // the lexer function defined by SECTION 2
  virtual ccl::rslang::TokenID lex(void);
  // lexer functions accepting new input to scan
  ccl::rslang::TokenID lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  ccl::rslang::TokenID lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

} // namespace ccl
} // namespace rslang
} // namespace detail
} // namespace rslex

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ccl {
namespace rslang {
namespace detail {
namespace rslex {
extern void reflex_code_INITIAL(reflex::Matcher&);
} // namespace ccl
} // namespace rslang
} // namespace detail
} // namespace rslex

ccl::rslang::TokenID ccl::rslang::detail::rslex::MathLexerImpl::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this, "T=1"));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
{ return TokenID::END; }
            }
            else
            {
              lexer_error("scanner jammed");
              return ccl::rslang::TokenID();
            }
            break;
          case 1: // rule MathLexerImpl.l:50: "+" :
{ return TokenID::PLUS; }
            break;
          case 2: // rule MathLexerImpl.l:51: "-" :
{ return TokenID::MINUS; }
            break;
          case 3: // rule MathLexerImpl.l:52: "*" :
{ return TokenID::MULTIPLY; }
            break;
          case 4: // rule MathLexerImpl.l:53: ">" :
{ return TokenID::GREATER; }
            break;
          case 5: // rule MathLexerImpl.l:54: "<" :
{ return TokenID::LESSER; }
            break;
          case 6: // rule MathLexerImpl.l:55: \x{2265} :
{ return TokenID::GREATER_OR_EQ; }
            break;
          case 7: // rule MathLexerImpl.l:56: \x{2264} :
{ return TokenID::LESSER_OR_EQ; }

            break;
          case 8: // rule MathLexerImpl.l:58: "=" :
{ return TokenID::EQUAL; }
            break;
          case 9: // rule MathLexerImpl.l:59: \x{2260} :
{ return TokenID::NOTEQUAL; }

            break;
          case 10: // rule MathLexerImpl.l:61: \x{2200} :
{ return TokenID::FORALL; }
            break;
          case 11: // rule MathLexerImpl.l:62: \x{2203} :
{ return TokenID::EXISTS; }

            break;
          case 12: // rule MathLexerImpl.l:64: \x{00AC} :
{ return TokenID::NOT; }
            break;
          case 13: // rule MathLexerImpl.l:65: "&" :
{ return TokenID::AND; }
            break;
          case 14: // rule MathLexerImpl.l:66: \x{2228} :
{ return TokenID::OR; }
            break;
          case 15: // rule MathLexerImpl.l:67: \x{21D2} :
{ return TokenID::IMPLICATION; }
            break;
          case 16: // rule MathLexerImpl.l:68: \x{21D4} :
{ return TokenID::EQUIVALENT; }

            break;
          case 17: // rule MathLexerImpl.l:70: :\x{2208} :
{ return TokenID::ITERATE; }
            break;
          case 18: // rule MathLexerImpl.l:71: \x{2208} :
{ return TokenID::IN; }
            break;
          case 19: // rule MathLexerImpl.l:72: \x{2209} :
{ return TokenID::NOTIN; }
            break;
          case 20: // rule MathLexerImpl.l:73: \x{2286} :
{ return TokenID::SUBSET_OR_EQ; }
            break;
          case 21: // rule MathLexerImpl.l:74: \x{2282} :
{ return TokenID::SUBSET; }
            break;
          case 22: // rule MathLexerImpl.l:75: \x{2284} :
{ return TokenID::NOTSUBSET; }

            break;
          case 23: // rule MathLexerImpl.l:77: \x{00D7} :
{ return TokenID::DECART; }
            break;
          case 24: // rule MathLexerImpl.l:78: \x{222A} :
{ return TokenID::UNION; }
            break;
          case 25: // rule MathLexerImpl.l:79: \x{2229} :
{ return TokenID::INTERSECTION; }
            break;
          case 26: // rule MathLexerImpl.l:80: \x{005C} :
{ return TokenID::SET_MINUS; }
            break;
          case 27: // rule MathLexerImpl.l:81: \x{2206} :
{ return TokenID::SYMMINUS; }
            break;
          case 28: // rule MathLexerImpl.l:82: \x{212C} :
{ return TokenID::BOOLEAN; }

            break;
          case 29: // rule MathLexerImpl.l:84: pr{index} :
{ return TokenID::SMALLPR; }
            break;
          case 30: // rule MathLexerImpl.l:85: Pr{index} :
{ return TokenID::BIGPR; }
            break;
          case 31: // rule MathLexerImpl.l:86: Fi{index} :
{ return TokenID::FILTER; }
            break;
          case 32: // rule MathLexerImpl.l:87: card :
{ return TokenID::CARD; }
            break;
          case 33: // rule MathLexerImpl.l:88: bool :
{ return TokenID::BOOL; }
            break;
          case 34: // rule MathLexerImpl.l:89: red :
{ return TokenID::REDUCE; }
            break;
          case 35: // rule MathLexerImpl.l:90: debool :
{ return TokenID::DEBOOL; }

            break;
          case 36: // rule MathLexerImpl.l:92: D :
{ return TokenID::DECLARATIVE; }
            break;
          case 37: // rule MathLexerImpl.l:93: R :
{ return TokenID::RECURSIVE; }
            break;
          case 38: // rule MathLexerImpl.l:94: I :
{ return TokenID::IMPERATIVE; }

            break;
          case 39: // rule MathLexerImpl.l:96: Z :
{ return TokenID::LIT_INTSET; }
            break;
          case 40: // rule MathLexerImpl.l:97: \x{2205} :
{ return TokenID::LIT_EMPTYSET; }
            break;
          case 41: // rule MathLexerImpl.l:98: {number} :
{ return TokenID::LIT_INTEGER; }

            break;
          case 42: // rule MathLexerImpl.l:100: F{number} :
{ return TokenID::ID_FUNCTION; }
            break;
          case 43: // rule MathLexerImpl.l:101: P{number} :
{ return TokenID::ID_PREDICATE; }
            break;
          case 44: // rule MathLexerImpl.l:102: R{number} :
{ return TokenID::ID_RADICAL; }

            break;
          case 45: // rule MathLexerImpl.l:104: {global_id} :
{ return TokenID::ID_GLOBAL; }
            break;
          case 46: // rule MathLexerImpl.l:105: {local_id} :
{ return TokenID::ID_LOCAL; }

            break;
          case 47: // rule MathLexerImpl.l:107: ":=" :
{ return TokenID::ASSIGN; }
            break;
          case 48: // rule MathLexerImpl.l:108: ":==" :
{ return TokenID::PUNC_DEFINE; }
            break;
          case 49: // rule MathLexerImpl.l:109: "::=" :
{ return TokenID::PUNC_STRUCT; }
            break;
          case 50: // rule MathLexerImpl.l:110: "(" :
{ return TokenID::PUNC_PL; }
            break;
          case 51: // rule MathLexerImpl.l:111: ")" :
{ return TokenID::PUNC_PR; }
            break;
          case 52: // rule MathLexerImpl.l:112: "{" :
{ return TokenID::PUNC_CL; }
            break;
          case 53: // rule MathLexerImpl.l:113: "}" :
{ return TokenID::PUNC_CR; }
            break;
          case 54: // rule MathLexerImpl.l:114: "[" :
{ return TokenID::PUNC_SL; }
            break;
          case 55: // rule MathLexerImpl.l:115: "]" :
{ return TokenID::PUNC_SR; }
            break;
          case 56: // rule MathLexerImpl.l:116: "|" :
{ return TokenID::PUNC_BAR; }
            break;
          case 57: // rule MathLexerImpl.l:117: "," :
{ return TokenID::PUNC_COMMA; }
            break;
          case 58: // rule MathLexerImpl.l:118: ";" :
{ return TokenID::PUNC_SEMICOLON; }

            break;
          case 59: // rule MathLexerImpl.l:120: \n :
{ lineBase += static_cast<StrPos>(columno() + 1); }
            break;
          case 60: // rule MathLexerImpl.l:121: [ \t]+ :
;
            break;
          case 61: // rule MathLexerImpl.l:123: . :
{ return TokenID::INTERRUPT; }

            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

namespace ccl {
namespace rslang {
namespace detail {
namespace rslex {

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c = 0;
  m.FSM_INIT(c);

S0:
  m.FSM_FIND();
  c = m.FSM_CHAR();
  if (c == 226) goto S58;
  if (c == 207) goto S221;
  if (c == 206) goto S217;
  if (c == 195) goto S82;
  if (c == 194) goto S69;
  if (c == '}') goto S234;
  if (c == '|') goto S243;
  if (c == '{') goto S231;
  if (c == 'r') goto S139;
  if (c == 'p') goto S89;
  if (c == 'd') goto S149;
  if (c == 'c') goto S119;
  if (c == 'b') goto S129;
  if ('a' <= c && c <= 'z') goto S208;
  if (c == '_') goto S208;
  if (c == ']') goto S240;
  if (c == '\\') goto S86;
  if (c == '[') goto S237;
  if (c == 'Z') goto S186;
  if (c == 'R') goto S168;
  if (c == 'P') goto S99;
  if (c == 'I') goto S177;
  if (c == 'F') goto S109;
  if (c == 'D') goto S159;
  if ('C' <= c && c <= 'Y') goto S199;
  if (c == 'A') goto S199;
  if (c == '>') goto S52;
  if (c == '=') goto S66;
  if (c == '<') goto S55;
  if (c == ';') goto S249;
  if (c == ':') goto S76;
  if ('0' <= c && c <= '9') goto S195;
  if (c == '-') goto S46;
  if (c == ',') goto S246;
  if (c == '+') goto S43;
  if (c == '*') goto S49;
  if (c == ')') goto S228;
  if (c == '(') goto S225;
  if (c == '&') goto S73;
  if (c == ' ') goto S254;
  if (c == '\n') goto S252;
  if (c == '\t') goto S254;
  if (0 <= c) goto S259;
  return m.FSM_HALT(c);

S43:
  m.FSM_TAKE(1);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S46:
  m.FSM_TAKE(2);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S49:
  m.FSM_TAKE(3);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S52:
  m.FSM_TAKE(4);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S55:
  m.FSM_TAKE(5);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S58:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 138) goto S285;
  if (c == 137) goto S262;
  if (c == 136) goto S268;
  if (c == 135) goto S280;
  if (c == 132) goto S291;
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S66:
  m.FSM_TAKE(8);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S69:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 172) goto S295;
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S73:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S76:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 226) goto S298;
  if (128 <= c && c <= 191) goto S259;
  if (c == '=') goto S300;
  if (c == ':') goto S303;
  return m.FSM_HALT(c);

S82:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 151) goto S305;
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S86:
  m.FSM_TAKE(26);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S89:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (128 <= c && c <= 191) goto S259;
  if (c == 'r') goto S308;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S99:
  m.FSM_TAKE(45);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if (128 <= c && c <= 191) goto S259;
  if (c == 'r') goto S328;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S336;
  return m.FSM_HALT(c);

S109:
  m.FSM_TAKE(45);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if (128 <= c && c <= 191) goto S259;
  if (c == 'i') goto S356;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S364;
  return m.FSM_HALT(c);

S119:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (128 <= c && c <= 191) goto S259;
  if ('b' <= c && c <= 'z') goto S316;
  if (c == 'a') goto S372;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S129:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (128 <= c && c <= 191) goto S259;
  if (c == 'o') goto S381;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S139:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (128 <= c && c <= 191) goto S259;
  if (c == 'e') goto S390;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S149:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (128 <= c && c <= 191) goto S259;
  if (c == 'e') goto S399;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S159:
  m.FSM_TAKE(36);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if (128 <= c && c <= 191) goto S259;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S344;
  return m.FSM_HALT(c);

S168:
  m.FSM_TAKE(37);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if (128 <= c && c <= 191) goto S259;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S408;
  return m.FSM_HALT(c);

S177:
  m.FSM_TAKE(38);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if (128 <= c && c <= 191) goto S259;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S344;
  return m.FSM_HALT(c);

S186:
  m.FSM_TAKE(39);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if (128 <= c && c <= 191) goto S259;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S344;
  return m.FSM_HALT(c);

S195:
  m.FSM_TAKE(41);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  if ('0' <= c && c <= '9') goto S416;
  return m.FSM_HALT(c);

S199:
  m.FSM_TAKE(45);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if (128 <= c && c <= 191) goto S259;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S344;
  return m.FSM_HALT(c);

S208:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (128 <= c && c <= 191) goto S259;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S217:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (177 <= c && c <= 191) goto S208;
  if (128 <= c && c <= 176) goto S259;
  return m.FSM_HALT(c);

S221:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (138 <= c && c <= 191) goto S259;
  if (128 <= c && c <= 137) goto S208;
  return m.FSM_HALT(c);

S225:
  m.FSM_TAKE(50);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S228:
  m.FSM_TAKE(51);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S231:
  m.FSM_TAKE(52);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S234:
  m.FSM_TAKE(53);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S237:
  m.FSM_TAKE(54);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S240:
  m.FSM_TAKE(55);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S243:
  m.FSM_TAKE(56);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S246:
  m.FSM_TAKE(57);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S249:
  m.FSM_TAKE(58);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S252:
  m.FSM_TAKE(59);
  return m.FSM_HALT();

S254:
  m.FSM_TAKE(60);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  if (c == ' ') goto S419;
  if (c == '\t') goto S419;
  return m.FSM_HALT(c);

S259:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S262:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 165) goto S423;
  if (c == 164) goto S426;
  if (c == 160) goto S429;
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S268:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 170) goto S447;
  if (c == 169) goto S450;
  if (c == 168) goto S438;
  if (c == 137) goto S444;
  if (c == 136) goto S441;
  if (c == 134) goto S453;
  if (c == 133) goto S456;
  if (c == 131) goto S435;
  if (129 <= c && c <= 191) goto S259;
  if (c == 128) goto S432;
  return m.FSM_HALT(c);

S280:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 148) goto S462;
  if (c == 146) goto S459;
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S285:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 134) goto S465;
  if (c == 132) goto S471;
  if (c == 130) goto S468;
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S291:
  m.FSM_TAKE(61);
  c = m.FSM_CHAR();
  if (c == 172) goto S474;
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S295:
  m.FSM_TAKE(12);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S298:
  c = m.FSM_CHAR();
  if (c == 136) goto S477;
  return m.FSM_HALT(c);

S300:
  m.FSM_TAKE(47);
  c = m.FSM_CHAR();
  if (c == '=') goto S479;
  return m.FSM_HALT(c);

S303:
  c = m.FSM_CHAR();
  if (c == '=') goto S481;
  return m.FSM_HALT(c);

S305:
  m.FSM_TAKE(23);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S308:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S483;
  return m.FSM_HALT(c);

S316:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S324:
  c = m.FSM_CHAR();
  if (177 <= c && c <= 191) goto S316;
  return m.FSM_HALT(c);

S326:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 137) goto S316;
  return m.FSM_HALT(c);

S328:
  m.FSM_TAKE(45);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S492;
  return m.FSM_HALT(c);

S336:
  m.FSM_TAKE(43);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S336;
  return m.FSM_HALT(c);

S344:
  m.FSM_TAKE(45);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S344;
  return m.FSM_HALT(c);

S352:
  c = m.FSM_CHAR();
  if (177 <= c && c <= 191) goto S344;
  return m.FSM_HALT(c);

S354:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 137) goto S344;
  return m.FSM_HALT(c);

S356:
  m.FSM_TAKE(45);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S501;
  return m.FSM_HALT(c);

S364:
  m.FSM_TAKE(42);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S364;
  return m.FSM_HALT(c);

S372:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'r') goto S510;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S381:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'o') goto S519;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S390:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'd') goto S528;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S399:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'b') goto S536;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S408:
  m.FSM_TAKE(44);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S408;
  return m.FSM_HALT(c);

S416:
  m.FSM_TAKE(41);
  c = m.FSM_CHAR();
  if ('0' <= c && c <= '9') goto S416;
  return m.FSM_HALT(c);

S419:
  m.FSM_TAKE(60);
  c = m.FSM_CHAR();
  if (c == ' ') goto S419;
  if (c == '\t') goto S419;
  return m.FSM_HALT(c);

S423:
  m.FSM_TAKE(6);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S426:
  m.FSM_TAKE(7);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S429:
  m.FSM_TAKE(9);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S432:
  m.FSM_TAKE(10);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S435:
  m.FSM_TAKE(11);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S438:
  m.FSM_TAKE(14);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S441:
  m.FSM_TAKE(18);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S444:
  m.FSM_TAKE(19);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S447:
  m.FSM_TAKE(24);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S450:
  m.FSM_TAKE(25);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S453:
  m.FSM_TAKE(27);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S456:
  m.FSM_TAKE(40);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S459:
  m.FSM_TAKE(15);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S462:
  m.FSM_TAKE(16);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S465:
  m.FSM_TAKE(20);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S468:
  m.FSM_TAKE(21);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S471:
  m.FSM_TAKE(22);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S474:
  m.FSM_TAKE(28);
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S259;
  return m.FSM_HALT(c);

S477:
  c = m.FSM_CHAR();
  if (c == 136) goto S545;
  return m.FSM_HALT(c);

S479:
  m.FSM_TAKE(48);
  return m.FSM_HALT();

S481:
  m.FSM_TAKE(49);
  return m.FSM_HALT();

S483:
  m.FSM_TAKE(29);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S483;
  if (c == ',') goto S547;
  return m.FSM_HALT(c);

S492:
  m.FSM_TAKE(30);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S492;
  if (c == ',') goto S549;
  return m.FSM_HALT(c);

S501:
  m.FSM_TAKE(31);
  c = m.FSM_CHAR();
  if (c == 207) goto S354;
  if (c == 206) goto S352;
  if ('a' <= c && c <= 'z') goto S344;
  if (c == '_') goto S344;
  if ('A' <= c && c <= 'Z') goto S344;
  if ('0' <= c && c <= '9') goto S501;
  if (c == ',') goto S551;
  return m.FSM_HALT(c);

S510:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'd') goto S553;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S519:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'l') goto S561;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S528:
  m.FSM_TAKE(34);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S536:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'o') goto S569;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S545:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S547:
  c = m.FSM_CHAR();
  if ('0' <= c && c <= '9') goto S578;
  return m.FSM_HALT(c);

S549:
  c = m.FSM_CHAR();
  if ('0' <= c && c <= '9') goto S582;
  return m.FSM_HALT(c);

S551:
  c = m.FSM_CHAR();
  if ('0' <= c && c <= '9') goto S586;
  return m.FSM_HALT(c);

S553:
  m.FSM_TAKE(32);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S561:
  m.FSM_TAKE(33);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S569:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'o') goto S590;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S578:
  m.FSM_TAKE(29);
  c = m.FSM_CHAR();
  if ('0' <= c && c <= '9') goto S578;
  if (c == ',') goto S547;
  return m.FSM_HALT(c);

S582:
  m.FSM_TAKE(30);
  c = m.FSM_CHAR();
  if ('0' <= c && c <= '9') goto S582;
  if (c == ',') goto S549;
  return m.FSM_HALT(c);

S586:
  m.FSM_TAKE(31);
  c = m.FSM_CHAR();
  if ('0' <= c && c <= '9') goto S586;
  if (c == ',') goto S551;
  return m.FSM_HALT(c);

S590:
  m.FSM_TAKE(46);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if (c == 'l') goto S599;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);

S599:
  m.FSM_TAKE(35);
  c = m.FSM_CHAR();
  if (c == 207) goto S326;
  if (c == 206) goto S324;
  if ('a' <= c && c <= 'z') goto S316;
  if (c == '_') goto S316;
  if ('A' <= c && c <= 'Z') goto S316;
  if ('0' <= c && c <= '9') goto S316;
  return m.FSM_HALT(c);
}

} // namespace ccl

} // namespace rslang

} // namespace detail

} // namespace rslex

